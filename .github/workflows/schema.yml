name: Database Schema Management

on:
  pull_request:
    paths: 
      - 'schemas/**'
      - 'examples/**'
  push:
    branches: [main]
    paths: 
      - 'schemas/**'
      - 'examples/**'

env:
  PGHOST: localhost
  PGPORT: 5432
  PGDATABASE: demo
  PGUSER: demo
  PGPASSWORD: demo

jobs:
  plan:
    name: Generate Migration Plan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_DB: demo
          POSTGRES_USER: demo
          POSTGRES_PASSWORD: demo
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
      
      - name: Install pgschema
        run: go install github.com/pgschema/pgschema@latest
      
      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U demo; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
          echo "PostgreSQL is ready!"
      
      - name: Determine schema file to use
        id: schema-file
        run: |
          # Check which schema files were modified
          if git diff --name-only origin/main...HEAD | grep -q "examples/showcase_features.sql"; then
            echo "schema_file=examples/showcase_features.sql" >> $GITHUB_OUTPUT
            echo "Using showcase_features.sql (advanced features)"
          elif git diff --name-only origin/main...HEAD | grep -q "schemas/v3_advanced.sql"; then
            echo "schema_file=schemas/v3_advanced.sql" >> $GITHUB_OUTPUT
            echo "Using v3_advanced.sql"
          elif git diff --name-only origin/main...HEAD | grep -q "schemas/v2_with_reviews.sql"; then
            echo "schema_file=schemas/v2_with_reviews.sql" >> $GITHUB_OUTPUT
            echo "Using v2_with_reviews.sql"
          else
            echo "schema_file=schemas/v1_initial.sql" >> $GITHUB_OUTPUT
            echo "Using v1_initial.sql (default)"
          fi
      
      - name: Generate Migration Plan
        id: plan
        run: |
          echo "Generating plan for: ${{ steps.schema-file.outputs.schema_file }}"
          
          # Generate plan in multiple formats
          pgschema plan \
            --file "${{ steps.schema-file.outputs.schema_file }}" \
            --output-human plan.txt \
            --output-json plan.json \
            --output-sql migration.sql
          
          # Check if there are any changes
          if grep -q "No changes to apply" plan.txt; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi
          
          # Capture plan summary for PR comment
          echo "PLAN_SUMMARY<<EOF" >> $GITHUB_OUTPUT
          head -20 plan.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Upload Plan Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: migration-plan-${{ github.event.pull_request.number }}
          path: |
            plan.txt
            plan.json
            migration.sql
          retention-days: 30
      
      - name: Comment PR with Plan
        if: steps.plan.outputs.has_changes == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // Read the plan file
            const planContent = fs.readFileSync('plan.txt', 'utf8');
            const sqlContent = fs.readFileSync('migration.sql', 'utf8');
            
            // Create comment body
            const body = `## 📋 Database Migration Plan
            
            **Schema File**: \`${{ steps.schema-file.outputs.schema_file }}\`
            **PR**: #${{ github.event.pull_request.number }}
            **Commit**: ${{ github.event.pull_request.head.sha }}
            
            ### Plan Summary
            \`\`\`
            ${planContent}
            \`\`\`
            
            ### SQL to be executed
            <details>
            <summary>Click to view SQL statements</summary>
            
            \`\`\`sql
            ${sqlContent}
            \`\`\`
            </details>
            
            ### Next Steps
            - ✅ Review the changes above
            - ✅ Ensure the plan matches your expectations
            - ✅ Merge this PR to apply changes automatically
            
            ---
            *Generated by pgschema v$(pgschema --version 2>/dev/null || echo 'unknown')*`;
            
            // Find existing comment to update
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('## 📋 Database Migration Plan')
            );
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }
      
      - name: Comment PR with No Changes
        if: steps.plan.outputs.has_changes == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            const body = `## 📋 Database Migration Plan
            
            **Schema File**: \`${{ steps.schema-file.outputs.schema_file }}\`
            **Result**: ✅ No database changes needed
            
            The current database schema already matches the desired state in the schema file.
            
            ---
            *Generated by pgschema v$(pgschema --version 2>/dev/null || echo 'unknown')*`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });

  apply:
    name: Apply Schema Changes
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_DB: demo
          POSTGRES_USER: demo
          POSTGRES_PASSWORD: demo
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
      
      - name: Install pgschema
        run: go install github.com/pgschema/pgschema@latest
      
      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U demo; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
          echo "PostgreSQL is ready!"
      
      - name: Determine schema file to apply
        id: schema-file
        run: |
          # Check which schema files were modified in the push
          if git diff --name-only HEAD~1 HEAD | grep -q "examples/showcase_features.sql"; then
            echo "schema_file=examples/showcase_features.sql" >> $GITHUB_OUTPUT
            echo "Applying showcase_features.sql (advanced features)"
          elif git diff --name-only HEAD~1 HEAD | grep -q "schemas/v3_advanced.sql"; then
            echo "schema_file=schemas/v3_advanced.sql" >> $GITHUB_OUTPUT
            echo "Applying v3_advanced.sql"
          elif git diff --name-only HEAD~1 HEAD | grep -q "schemas/v2_with_reviews.sql"; then
            echo "schema_file=schemas/v2_with_reviews.sql" >> $GITHUB_OUTPUT
            echo "Applying v2_with_reviews.sql"
          else
            echo "schema_file=schemas/v1_initial.sql" >> $GITHUB_OUTPUT
            echo "Applying v1_initial.sql (default)"
          fi
      
      - name: Download Plan Artifact (if available)
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          name: migration-plan-${{ github.event.before }}
          path: ./artifacts/
      
      - name: Apply Schema Changes
        id: apply
        run: |
          echo "Applying schema changes from: ${{ steps.schema-file.outputs.schema_file }}"
          
          # Try to use pre-generated plan first, fall back to direct apply
          if [ -f "./artifacts/plan.json" ]; then
            echo "Using pre-generated plan from PR..."
            pgschema apply --plan ./artifacts/plan.json --auto-approve
          else
            echo "Generating and applying plan directly..."
            pgschema apply --file "${{ steps.schema-file.outputs.schema_file }}" --auto-approve
          fi
          
          echo "Schema changes applied successfully!"
      
      - name: Verify Schema State
        run: |
          echo "Verifying schema state after application..."
          
          # Dump current schema for verification
          pgschema dump > current_schema.sql
          
          # Basic verification queries
          echo "Tables in database:"
          psql -c "\dt"
          
          echo "Functions in database:"
          psql -c "\df"
          
          echo "Materialized views:"
          psql -c "\dm"
          
          echo "Schema verification completed successfully!"
      
      - name: Create Deployment Summary
        run: |
          echo "## 🚀 Schema Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Schema File**: \`${{ steps.schema-file.outputs.schema_file }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Status**: ✅ Successfully Applied" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Database Objects" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          psql -c "\dt" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Scan for sensitive data
        run: |
          echo "Scanning schema files for sensitive data patterns..."
          
          # Check for hardcoded passwords, keys, etc.
          if grep -r -i "password\s*=" schemas/ examples/ || \
             grep -r -i "secret\s*=" schemas/ examples/ || \
             grep -r -i "api_key\s*=" schemas/ examples/; then
            echo "❌ Potential sensitive data found in schema files!"
            exit 1
          else
            echo "✅ No sensitive data patterns detected"
          fi
      
      - name: Validate SQL syntax
        run: |
          echo "Validating SQL syntax in schema files..."
          
          # Basic SQL syntax validation (could be enhanced with actual SQL parser)
          for file in schemas/*.sql examples/*.sql; do
            if [ -f "$file" ]; then
              echo "Checking $file..."
              # Simple checks for common SQL syntax issues
              if grep -q "DROP DATABASE\|DROP SCHEMA.*CASCADE" "$file"; then
                echo "❌ Dangerous DROP statements found in $file"
                exit 1
              fi
            fi
          done
          
          echo "✅ SQL syntax validation passed"

  performance-check:
    name: Performance Impact Analysis
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_DB: demo
          POSTGRES_USER: demo
          POSTGRES_PASSWORD: demo
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
      
      - name: Install pgschema
        run: go install github.com/pgschema/pgschema@latest
      
      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U demo; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
      
      - name: Analyze Performance Impact
        run: |
          echo "Analyzing performance impact of schema changes..."
          
          # Generate plan to analyze
          pgschema plan --file schemas/v3_advanced.sql --output-json plan.json
          
          # Check for potentially expensive operations
          if grep -q "CREATE INDEX" plan.json; then
            echo "⚠️  Index creation detected - may impact performance during deployment"
          fi
          
          if grep -q "ALTER TABLE.*ADD COLUMN" plan.json; then
            echo "⚠️  Column addition detected - consider impact on large tables"
          fi
          
          if grep -q "DROP" plan.json; then
            echo "⚠️  DROP operations detected - ensure data backup is available"
          fi
          
          echo "✅ Performance impact analysis completed"